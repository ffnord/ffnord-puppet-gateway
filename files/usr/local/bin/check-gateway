#!/bin/bash

shopt -s nullglob


. /etc/ffnord

MAINTENANCE=${MAINTENANCE:-0}
# Interface to watch at
GW_INTERFACE=${GW_INTERFACE:-"tun-anonvpn"}
# Maximum minutes until interface missing has effect
MAX_INTERFACE_MISSING=${MAX_INTERFACE_MISSING:-10}
# Maximum packet loss tolerated in percent
MAX_PKT_LOSS=${MAX_PKT_LOSS:-50}
# Maximum minutes continued intolerable packet loss until effect  
MAX_PKT_LOSS_EXCEED=${MAX_PKT_LOSS_EXCEED:-2}

# State keeping files
INTERFACE_MISSING_STATE="/tmp/chkgw-interface-missing"
PKT_LOSS_EXCEEDED_STATE="/tmp/chkgw-pktloss-exceeded"

ping_test(){
    local CONTROL_IPs=( ${1:-"${GW_CONTROL_IP[@]}"} )
    ping_loss="${#CONTROL_IPs[@]}"
    for CONTROL_IP in "${CONTROL_IPs[@]}"; do
      ping -q -m 1 "$CONTROL_IP" -c 1 -i 1 -W 1 >/dev/null 2>&1
      if [[ $? -eq 0 ]]; then
        ping_loss=$(( ping_loss - 1 ))
      fi
    done
}
 
if [[ $MAINTENANCE -eq 0 ]]; then

    # ensure that we have the appropriate rules
    /sbin/ip rule | grep 32000 > /dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
        /sbin/ip rule add from all fwmark 0x1 table 42 preference 32000
    fi

    /sbin/ip rule | grep 32001 > /dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
        /sbin/ip rule add from all fwmark 0x1 unreachable preference 32001
    fi

    # check for openvpn interface and try to restart if interface is missing
    /sbin/ip link show dev "${GW_INTERFACE}" > /dev/null 2>&1 
    if [[ $? -gt 0 ]] 
    then
       # count missing states and restart after $INTERFACE_MISSING minutes
       INTERFACE_MISSING=$(cat "$INTERFACE_MISSING_STATE" 2>/dev/null || echo 0)
       echo $(( INTERFACE_MISSING + 1)) > "$INTERFACE_MISSING_STATE"
       logger -t check-gateway -p daemon.info "Interface $GW_INTERFACE does not exist, for $INTERFACE_MISSING minutes."
       if [[ "$INTERFACE_MISSING" -gt "$MAX_INTERFACE_MISSING" ]] 
       then 
         logger -t check-gatway -p daemon.info -s "Interface $GW_INTERFACE does not exist, for longer than $MAX_INTERFACE_MISSING. Going into maintenance."
         /usr/local/bin/maintenance on
         exit 1
       fi
       logger -t check-gatway -p daemon.info -s "restart openvpn"
       /usr/sbin/service openvpn stop
       /usr/sbin/service openvpn start
    else 
      echo 0 > "${INTERFACE_MISSING_STATE}"
    fi

    # check for service
    if [[ "$(/usr/bin/pgrep -fc openvpn > /dev/null)" -gt 0 ]]
    then
      logger -t check-gateway -p daemon.info -s "Can't find running openvpn service, enforce start"
      /usr/sbin/service openvpn start
    fi

    # ping check
    logger -t check-gateway -p daemon.info "Trying to get a replies from ${GW_CONTROL_IP[@]} ..."

    ping_test

    PKT_LOSS=$(( 100 * ping_loss / ${#GW_CONTROL_IP} )) 
    if [[ "$PKT_LOSS" -lt "$MAX_PKT_LOSS" ]]
    then
        logger -t check-gateway -p daemon.info "Messured ${PKT_LOSS}% packet loss, so everything seems to be in order."
        NEW_STATE=server
        echo 0 > "$PKT_LOSS_EXCEEDED_STATE"
    else
        PKT_LOSS_EXCEEDED=$(cat "$PKT_LOSS_EXCEEDED_STATE" 2>/dev/null || echo 0)
        echo $(( PKT_LOSS_EXCEEDED + 1 )) > "$PKT_LOSS_EXCEEDED_STATE"
        if [[ "$PKT_LOSS_EXCEEDED" -gt "$MAX_PKT_LOSS_EXCEED" ]] 
        then
          logger -t check-gateway -p daemon.err "Measured ${PKT_LOSS}% packet loss, so there seems to be a problem, deactivating gateway mode."
          NEW_STATE=off
        else
          logger -t check-gateway -p daemon.err "Measured ${PKT_LOSS}% packet loss, so there seems to be a problem, for $PKT_LOSS_EXCEEDED minutes."
        fi
    fi

else
    NEW_STATE=off
fi

for MESH in /sys/class/net/*/mesh; do
OLD_STATE="$(cat "${MESH}/gw_mode")"
NEW_STATE="${NEW_STATE:-"$OLD_STATE"}"
[ "$OLD_STATE" == "$NEW_STATE" ] && continue
    echo "$NEW_STATE" > "$MESH/gw_mode"
    logger -t check-gateway -p daemon.notice -s "batman gateway mode changed to $NEW_STATE"

    # Check whether gateway modus has been deactivated
    if [ "$NEW_STATE" == "off" ]; then
        logger -t check-gateway -p daemon.notice -s "stopping isc-dhcp-server and radvd"
        # Shutdown DHCP server to prevent renewal of leases
        /usr/sbin/service isc-dhcp-server stop
        # Shutdown RAdv server to prevent announcement of IPv6 routing prefixes
        /usr/sbin/service radvd stop
    fi

    # Check whether gateway modus has been activated
    if [ "$NEW_STATE" == "server" ]; then
        logger -t check-gateway -p daemon.notice -s "starting isc-dhcp-server and radvd"
        # Restart DHCP server
        /usr/sbin/service isc-dhcp-server start
        /usr/sbin/service radvd start
    fi
    exit 0
done

if [ "$NEW_STATE" == "server" ]; then
    for service in isc-dhcp-server radvd; do
      /usr/sbin/service $service status > /dev/null 2>&1
      if [[ $? -ne 0 ]]
      then
          logger -t check-gateway -p daemon.notice -s "restarting $service"
          /usr/sbin/service $service restart
      fi
    done
fi
if [ "$NEW_STATE" == "off" ]; then
    for service in isc-dhcp-server radvd; do
      /usr/sbin/service $service status > /dev/null 2>&1
      if [[ $? -eq 0 ]]
      then
          logger -t check-gateway -p daemon.notice -s "stopping $service"
          /usr/sbin/service $service stop
      fi
    done
fi

# vim: noai:ts=4:sw=4:ff=unix:ft=text:fdm=marker
