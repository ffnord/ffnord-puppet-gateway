# this file is generated by puppet
#
# ffnord bird6 base configuration 
#
# This file defines basic templates, base protocols and
# finally pulls in every file suffixed with .conf inside 
# of "/etc/bird6.conf.d/". So if you like to add aditional
# protocols create a file in that directory.

router id <%= @router_id %>;

# The mesh table is the main table which is piped
# into the kernel table. Every mesh specific
# table exports it routes to the mesh table and import
# routes which are not in the mesh specific prefix.
# The mesh_${site} tables exchange routes with the local
# peers from here routes to local subnets are communicated 
# and routes to other communities from icvpn peers in the local
# network are exchanged. 
# 
# If this router is a icvpn peer then routes from the
# icvpn will be exchanged directly with the mesh table.
#              
# icvpn <-> [mesh] <#> [mesh_ffgc,..] <#> local-peers
#             ^--------> [kernel(rtable=42)]
table mesh;
table kernel_main;

# Filter function to check if an IPv6 Route is a ULA.
function is_ula() {
  return (net ~ [ fc00::/7{48,64} ]);
};

# Filter function to check if an IPv6 Route is from
# a Freifunk range.
function is_freifunk() {
  return net ~ [ 2001:0bf7::/32+,   # Foerderverein freie Netzwerke e.V.
                 2a03:2260::/29+ ]; # Freifunk Rheinland e.V.
};

# Filter function to check if an IPv6 Route is a Default route.
function is_default() {
  return net ~ [ ::0/0 ];
}

# don't use kernel's routes for bird, but export bird's 
# routes to kernel table 42. 
#
# We do not import any routes here, therefore we can be sure
# that no funny routes jump into our waggon.
protocol kernel {
  scan time 20;    # Scan kernel routing table every 20 seconds
  kernel table 42; # routing table for mesh networks
  import none;     # Import no routes
  export all;      # Export all routes
};

# export to kernel main table for local services
protocol kernel {
  table kernel_main;
  scan time 20;
  import none;
  export all;
  persist;
};

# This pseudo-protocol watches all interface up/down events.
protocol device {
  scan time 10; # Scan interfaces every 10 seconds 
};

# pipe between mesh table and kernel table
# import everything from mesh table into 
# kernel table and export no routes into mesh.
protocol pipe pipe_kernel_mesh {
  peer table mesh;
  import all;
  export none;
};

protocol pipe pipe_kernel_main_mesh {
  table kernel_main;
  peer table mesh;
  import where ! is_default();
  export none;
};

# template for local route exchange via bgp
template bgp local_mesh {
  import where is_ula() || is_freifunk() || is_default();
  export where source = RTS_BGP;
  direct;
  next hop self;
};

# Include puppet generated rules
